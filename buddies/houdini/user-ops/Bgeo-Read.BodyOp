BodyOp Bgeo-Read
|*<h3> Overview</h3>
Bgeo-Read is a body operator that let you use Houdini's binary geometry format Bgeo 
to import meshes and particles. In Houdini, you can explicitly add your own 
custom attributes per Point, Vertex or Primitive and they will be imported together 
with the body into different shape channels. When exporting from Houdini, there are 
some general rules that must be followed in order to get this operator to work: 
<ul>
<li>If exporting a mesh, each polygon MUST contain 3 vertices.</li>
<li>You can NOT mix sets of particles and polygons in a single Bgeo file. Export them separately.</li>
<li>Do NOT use the '$' character when naming your custom made attributes (more on this can be read below).</li>
<li>You can only add custom attributes of the types: float, int and vector (i.e String, Char and Index is not supported)</li>
<li>When using float or int for a custom attribute, only one or three elements can be used (e.g a custom attribute of 2 or 4 floats will NOT work)</li> 
</ul>

At the moment, the following parameters are <u>ignored</u> in the Bgeo-Read operator:
<ul>
<li>Point Groups</li>
<li>Primitive Groups</li>
<li>Detail attributes</li>
</ul>
*|
{   
    Category "File"
	EnumGroup BodySignature{
	"Mesh"
	"Particle"	
	}

    ParamSection "Import Settings"
    {
	FileName "Filename" "filename.#.bgeo"
	|* Name of the Bgeo file. # will be interpreted as the current frame (set Frame Padding to fit your export settings) *|

	Int "Frame Padding" "4"
	|* The number of zeroes to padding the frame number by, when expanding to the absolute Bgeo filename. *|

	BodyName "Body Name" "bgeo-body"
	|*  *|

	BodySignature "Body Signature" "Mesh"
	|*The Body Signature decides if your imported Bgeo file should be treated as a Mesh or Particle 
	body. If the Mesh Body Signature is selected, the Bgeo-Read operator takes for granted that the 
	Bgeo file contains data about primitives. If a Mesh was exported from Houdini and the Particle 
	Body Signature is selected, all points will be treated as particles. *|

	Toggle "Integrity Check" "On"
	|*As stated earlier, each polygon must have 3 and only 3 vertices. The Integrity check option 
	adds an extra control when loading a Bgeo that verifies that every primtive is a triangle. 
	If you are certain that your mesh only contains triangles, you can skip this option and get 
	a slightly(roughly 5%) faster import process.*|
    }

    ParamSection "Attributes Include Lists"
    {
	String "Point" "*"
	String "Primitive" "*"
	String "Vertex" "*"
    }

    ParamSection "Tile Layout"
    {
	Float "Cell Scale" "1"
	|* Amount to scale the dimensions of the cells in the tile layout by. Note that this parameter does not represent the actual worldspace dimensions of the cells, rather it uniformly scales them. To find out the actual worldspace dimensions you have to multiply this parameter by the global parameter "Master Cell Size". This allows you to set a global cell size in worldspace units for the whole simulation (the "Master Cell Size"), and still allow each body to have its own cell-size by changing this parameter. If you later decide to globally uprez the simulation, you don't have to find every "Cell Scale" parameter on all the BodyOps that have it, but simply change the "Master Cell Size". *|
	Int   "Tile Size"  "9"
	||The number of cells along each dimension of each tile in the volume
    }

    Single(Body) Output "body-output"
}
