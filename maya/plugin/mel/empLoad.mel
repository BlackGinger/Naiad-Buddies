global proc string NBuddy_CreateEmpLoader( string $empFilePath, int $startFrame, int $endFrame )
{
	// Create the EmpLoader
	string $empLoader = createNode("NBuddyEMPLoader");
	
	// If the frameRange has been set then
	if ( $startFrame != $endFrame )
	{
		setAttr ($empLoader+".startFrame") $startFrame;
		setAttr ($empLoader+".endFrame") $endFrame;	
	}

	//Set the attribute onto the node
	setAttr -type "string" ($empLoader+".empInputPath") $empFilePath;	
	
	//Connect time to the node if its a squence
	if ( `match "\\.#\\." $empFilePath` != "" )
		expression -s ($empLoader+".frame = floor(frame);")  -o $empLoader -ae 1 -uc all ;
	
	// Return the name of the loader
	return $empLoader;
}

global proc NBuddy_findFileSequenceRange( string $file , int $range[] )
{
	string $folderName = `match ".+/" $file`;
	string $fileName = `substitute $folderName $file ""`;

	string $filespec = `substitute "\\.[-0-9]+\\." $fileName ".*."`;
	string $sequenceFiles[] = `getFileList -folder $folderName -filespec $filespec`;

	int $start = 9999999999; //Rather unlikely we will be outside these for the framerange ;)
	int $end =  -9999999999;

	for ($i=0; $i < `size $sequenceFiles`; $i++ )
	{
		string $dotNr = `match "\\.[-0-9]+" $sequenceFiles[$i]`;
		int $nr = (int)`substitute "\\." $dotNr ""`;
		print("Checking : " +$dotNr+" : "+$nr+"\n");
	
		if ($nr < $start)
			$start = $nr;
		
		if ( $nr > $end )
			$end = $nr;
	}

	$range[0] = $start;
	$range[1] = $end;
}

global proc NBuddy_EmpMeshLoaderWindow( string $empFile )
{
	// Make sure the window is "fresh"
	if ( `window -exists "NBuddyEmpLoaderWindow"` )
		deleteUI -window "NBuddyEmpLoaderWindow";

	// Get the info from emp file
	string $empInfo[] = `naiadEmpInfo -empfile $empFile -bn -bs`;
	int $numBodies = `size $empInfo`/2;

	window -title "Naiad Emp Loader" -resizeToFitChildren true "NBuddyEmpLoaderWindow";
	columnLayout -adjustableColumn true;
	text -label ("Loading file");
	text -label ($empFile);

	//Create the list of bodies
	textScrollList -height 100 -numberOfRows $numBodies -allowMultiSelection true "empMeshLoaderWindowBodyList";
	for ( $i=0; $i<$numBodies; $i++ )
	{
		if ($empInfo[$i*2+1] == "Mesh" ) // Make sure its a mesh
		{
			textScrollList -e -append $empInfo[$i*2] "empMeshLoaderWindowBodyList";
			textScrollList -e -selectItem $empInfo[$i*2] "empMeshLoaderWindowBodyList";
		}
	}

	//Check if we have a framenumber and enable flags if so
	if ( `match "\\.[-0-9]+\\.emp" $empFile` != "" )
	{
		//CheckBox for the sequence range
		int $fileRange[];
		NBuddy_findFileSequenceRange( $empFile , $fileRange );

		checkBox -label ("UseFrameRange:"+$fileRange[0]+" >> "+$fileRange[1]) "empMeshLoaderWindowUseRangeCheckBox";
		checkBox -v 1 -label "TreatAsSequence" "empMeshLoaderWindowIsSequence";
	}
	else
	{	//If we dont have a framenumber in the path then disable the flags for handling sequences
		checkBox -visible 0 -label ("UseFrameRange:") "empMeshLoaderWindowUseRangeCheckBox";
		checkBox -v 0 -visible 0 -label "TreatAsSequence" "empMeshLoaderWindowIsSequence";
	}

	button -label "Import Selected Bodies as Meshes" -command ( "NBuddy_EmpToMeshesFromWindow(\"" + $empFile + "\");deleteUI -window \"NBuddyEmpLoaderWindow\"" );

	setParent ..;

	showWindow "NBuddyEmpLoaderWindow";
}

global proc NBuddy_EmpToMeshesFromWindow( string $empFile )
{
	int $numBodies = `textScrollList -q -numberOfSelectedItems "empMeshLoaderWindowBodyList"`;
	
	string $bodies[] = `textScrollList -q -si "empMeshLoaderWindowBodyList"`;
	
	int $startFrame = 0;
	int $endFrame = 0;

	//If its to be treated like a sequence
	if ( `checkBox -q -v "empMeshLoaderWindowIsSequence"` )
	{
		//Figure out if we want to use the framerange and extract
		if ( `checkBox -q -v "empMeshLoaderWindowUseRangeCheckBox"` )
		{
			string $label = `checkBox -q -label "empMeshLoaderWindowUseRangeCheckBox"`;
			int $subStart = size("UseFrameRange:")+1;
			int $subEnd = size($label);
			string $rangeStr = `substring $label $subStart $subEnd`;
			string $tokens[] = stringToStringArray( $rangeStr, " >> ");
			$startFrame = $tokens[0];
			$endFrame = $tokens[1];
		}

		$empFile = `substitute "\\.[-0-9]+\\." $empFile ".#."`;
	}
	
	// Now finally create the meshes
	string $empLoader = NBuddy_CreateEmpLoader( $empFile, $startFrame, $endFrame );
	NBuddy_EmpBodiesToMeshes( $empLoader , $bodies );
}
global proc NBuddy_EmpBodiesToMeshes( string $empLoader , string $bodyNames[] )
{
	// Now get the names of the bodies in an ordered list so we know what outputs to grab
	string $outBodyNames = `getAttr ($empLoader+".outBodyNames")`;
	string $loaderNames[];
	tokenize $outBodyNames " " $loaderNames;
	
	// Loop the loader body names and check if we are extracting them
	for ( $i=0; $i<`size $loaderNames`; $i++)
	{
		if ( stringArrayCount( $loaderNames[$i], $bodyNames) ) //Are we extracting
		{
			// Create the bodyToMesh node and grab the correct body
			string $bodyToMesh = `createNode("NBuddyBodyToMesh")`;
			connectAttr -f ($empLoader+".outBodies["+$i+"]") ($bodyToMesh+".inBody");

			//Create the dummy geoNode
			string $poly[] = `polySphere -name $loaderNames[$i] -createUVs 0 -constructionHistory 0`;

			//Connect the naiad mesh, to the geo node
			connectAttr -f ($bodyToMesh+".outMesh") ($poly[0]+".inMesh");
			connectAttr -f "time1.outTime" ($bodyToMesh+".time");
		}
	}
}

global proc NBuddy_EmpTransformLoaderWindow( string $empFile )
{
	// Make sure the window is "fresh"
	if ( `window -exists "NBuddyEmpLoaderWindow"` )
		deleteUI -window "NBuddyEmpLoaderWindow";

	// Get the info from emp file
	string $empInfo[] = `naiadEmpInfo -empfile $empFile -bn -bs`;
	int $numBodies = `size $empInfo`/2;

	window -title "Naiad Emp Loader" -resizeToFitChildren true "NBuddyEmpLoaderWindow";
	columnLayout -adjustableColumn true;
	text -label ("Loading file");
	text -label ($empFile);

	//Create the list of bodies
	textScrollList -height 100 -numberOfRows $numBodies -allowMultiSelection true "empMeshLoaderWindowBodyList";
	for ( $i=0; $i<$numBodies; $i++ )
	{
		textScrollList -e -append $empInfo[$i*2] "empMeshLoaderWindowBodyList";
		textScrollList -e -selectItem $empInfo[$i*2] "empMeshLoaderWindowBodyList";
	}

	//Check if we have a framenumber and enable flags if so
	if ( `match "\\.[-0-9]+\\.emp" $empFile` != "" )
	{
		//CheckBox for the sequence range
		int $fileRange[];
		NBuddy_findFileSequenceRange( $empFile , $fileRange );

		checkBox -label ("UseFrameRange:"+$fileRange[0]+" >> "+$fileRange[1]) "empMeshLoaderWindowUseRangeCheckBox";
		checkBox -v 1 -label "TreatAsSequence" "empMeshLoaderWindowIsSequence";
	}
	else
	{	//If we dont have a framenumber in the path then disable the flags for handling sequences
		checkBox -visible 0 -label ("UseFrameRange:") "empMeshLoaderWindowUseRangeCheckBox";
		checkBox -v 0 -visible 0 -label "TreatAsSequence" "empMeshLoaderWindowIsSequence";
	}

	button -label "Import Selected Bodies as Transforms" -command ( "NBuddy_EmpToTransformsFromWindow(\"" + $empFile + "\");deleteUI -window \"NBuddyEmpLoaderWindow\"" );

	setParent ..;

	showWindow "NBuddyEmpLoaderWindow";
}

global proc NBuddy_EmpToTransformsFromWindow( string $empFile )
{
	int $numBodies = `textScrollList -q -numberOfSelectedItems "empMeshLoaderWindowBodyList"`;
	
	string $bodies[] = `textScrollList -q -si "empMeshLoaderWindowBodyList"`;
	
	int $startFrame = 0;
	int $endFrame = 0;

	//If its to be treated like a sequence
	if ( `checkBox -q -v "empMeshLoaderWindowIsSequence"` )
	{
		//Figure out if we want to use the framerange and extract
		if ( `checkBox -q -v "empMeshLoaderWindowUseRangeCheckBox"` )
		{
			string $label = `checkBox -q -label "empMeshLoaderWindowUseRangeCheckBox"`;
			int $subStart = size("UseFrameRange:")+1;
			int $subEnd = size($label);
			string $rangeStr = `substring $label $subStart $subEnd`;
			string $tokens[] = stringToStringArray( $rangeStr, " >> ");
			$startFrame = $tokens[0];
			$endFrame = $tokens[1];
		}

		$empFile = `substitute "\\.[-0-9]+\\." $empFile ".#."`;
	}
	
	// Now finally create the meshes
	string $empLoader = NBuddy_CreateEmpLoader( $empFile, $startFrame, $endFrame );
	NBuddy_EmpBodiesToTransforms( $empLoader , $bodies );
}


global proc NBuddy_EmpBodiesToTransforms( string $empLoader , string $bodyNames[] )
{
	// Now get the names of the bodies in an ordered list so we know what outputs to grab
	string $outBodyNames = `getAttr ($empLoader+".outBodyNames")`;
	string $loaderNames[];
	tokenize $outBodyNames " " $loaderNames;
	
	// Loop the loader body names and check if we are extracting them
	for ( $i=0; $i<`size $loaderNames`; $i++)
	{
		if ( stringArrayCount( $loaderNames[$i], $bodyNames) ) //Are we extracting
		{
			// Create the bodyToMesh node and grab the correct body
			string $bodyToTransform = `createNode("NBuddyTransformExtractor")`;
			connectAttr -f ($empLoader+".outBodies["+$i+"]") ($bodyToTransform+".inBody");

			//Create the dummy locator
			string $locator[] = `spaceLocator -p 0 0 0 -name $loaderNames[$i]`;

			//Connect the naiad mesh, to the geo node
			connectAttr -f ($bodyToTransform+".outTranslate") ($locator[0]+".translate");
			connectAttr -f ($bodyToTransform+".outRotate") ($locator[0]+".rotate");
			connectAttr -f ($bodyToTransform+".outScale") ($locator[0]+".scale");
		}
	}
}

global proc NBuddy_EmpLoaderUI()
{
	string $workspace = `workspace -query -directory`;
	//Ask the user for the emp file path
	string $file = `fileDialog -m 0 -t "Load Emp File" -directoryMask ($workspace+"data/*.emp")`;

	int $start = -1; int $end = -1;
	string $useRange = "No";
	if ( `match "\\.[-0-9]+\\.emp" $file` != "" )
	{
		//Figure out if we want to extract the range of the animation
		//This will allow the loader to always have a valid emp even if outside the range of the cache
		int $start = -1; int $end = -1;
		$useRange = `confirmDialog -title "Confirm" -message "UseFileSequenceRange?" -button "Yes" -button "No" -defaultButton "Yes" -cancelButton "No" -dismissString "No"`;
	}
	
	if ( $useRange == "Yes" )
	{
		int $range[];
		NBuddy_findFileSequenceRange( $file, $range);
		$start = $range[0];
		$end = $range[1];
		$file = `substitute "\\.[-0-9]+\\.emp" $file ".#.emp"`;
	}
	string $empLoader = NBuddy_CreateEmpLoader( $file , $start, $end );
}

global proc NBuddy_LoadEmpMeshesUI()
{
	string $workspace = `workspace -query -directory`;
	string $file = `fileDialog -m 0 -t "Load Emp File" -directoryMask ($workspace+"data/*.emp")`;
	NBuddy_EmpMeshLoaderWindow( $file );
}

global proc NBuddy_LoadEmpTransformsUI()
{
	string $workspace = `workspace -query -directory`;
	string $file = `fileDialog -m 0 -t "Load Emp File" -directoryMask ($workspace+"data/*.emp")`;
	NBuddy_EmpTransformLoaderWindow( $file );
}

global proc NBuddy_empBodyQueryWindow( string $launchString , string $launchFunction  )
{
	string $workspace = `workspace -query -directory`;
	string $empFile = `fileDialog -m 0 -t "Load Emp File" -directoryMask ($workspace+"data/*.emp")`;

	// Make sure the window is "fresh"
	if ( `window -exists "NBuddyEmpLoaderWindow"` )
		deleteUI -window "NBuddyEmpLoaderWindow";

	// Get the info from emp file
	string $empInfo[] = `naiadEmpInfo -empfile $empFile -bn -bs`;
	int $numBodies = `size $empInfo`/2;

	window -title "Naiad Emp Loader" -resizeToFitChildren true "NBuddyEmpLoaderWindow";
	columnLayout -adjustableColumn true;
	text -label ("Loading file");
	text -label ($empFile) "NBuddyEmpFileEmpLoaderWindow";

	//Create the list of bodies
	textScrollList -height 100 -numberOfRows $numBodies "empMeshLoaderWindowBodyList";
	for ( $i=0; $i<$numBodies; $i++ )
	{
		textScrollList -e -append $empInfo[$i*2] "empMeshLoaderWindowBodyList";
		textScrollList -e -selectItem $empInfo[$i*2] "empMeshLoaderWindowBodyList";
	}

	//Check if we have a framenumber and enable flags if so
	if ( `match "\\.[-0-9]+\\.emp" $empFile` != "" )
	{
		//CheckBox for the sequence range
		int $fileRange[];
		NBuddy_findFileSequenceRange( $empFile , $fileRange );

		checkBox -label ("UseFrameRange:"+$fileRange[0]+" >> "+$fileRange[1]) "empMeshLoaderWindowUseRangeCheckBox";
		checkBox -v 1 -label "TreatAsSequence" "empMeshLoaderWindowIsSequence";
	}
	else
	{	//If we dont have a framenumber in the path then disable the flags for handling sequences
		checkBox -visible 0 -label ("UseFrameRange:") "empMeshLoaderWindowUseRangeCheckBox";
		checkBox -v 0 -visible 0 -label "TreatAsSequence" "empMeshLoaderWindowIsSequence";
	}

	button -label $launchString -command ( "NBuddy_EmpBodyLoad(\"" + $launchFunction + "\");deleteUI -window \"NBuddyEmpLoaderWindow\"" );

	setParent ..;

	showWindow "NBuddyEmpLoaderWindow";
}

global proc NBuddy_EmpBodyLoad( string $launchFunction )
{
	string $bodies[] = `textScrollList -q -si "empMeshLoaderWindowBodyList"`;
	string $empFile = `text -q -label "NBuddyEmpFileEmpLoaderWindow"`;

	int $startFrame = 0;
	int $endFrame = 0;

	//If its to be treated like a sequence
	if ( `checkBox -q -v "empMeshLoaderWindowIsSequence"` )
	{
		//Figure out if we want to use the framerange and extract
		if ( `checkBox -q -v "empMeshLoaderWindowUseRangeCheckBox"` )
		{
			string $label = `checkBox -q -label "empMeshLoaderWindowUseRangeCheckBox"`;
			int $subStart = size("UseFrameRange:")+1;
			int $subEnd = size($label);
			string $rangeStr = `substring $label $subStart $subEnd`;
			string $tokens[] = stringToStringArray( $rangeStr, " >> ");
			$startFrame = $tokens[0];
			$endFrame = $tokens[1];
		}

		$empFile = `substitute "\\.[-0-9]+\\." $empFile ".#."`;
	}

	if ( size($bodies) > 0 )
	{
		string $empLoader = NBuddy_CreateEmpLoader( $empFile, $startFrame, $endFrame );
		
		//Figure out which plug belongs to our body
		string $empLoaderBodyNames = `getAttr ($empLoader+".outBodyNames")`;
		print ("EMP loader body Names "+$empLoaderBodyNames+"\n");
		string $splits[] = `stringToStringArray $empLoaderBodyNames " "`;
		print $splits;
		int $numBodies = `size $splits`;
		int $num = 0;
		
		for ($i=0; $i<=$numBodies; $i++)
		{
			if ( $i < $numBodies )
			{
				print ("Comparing : "+$splits[$i]+" with "+$bodies[0]+"\n");
				if ( $splits[$i] == $bodies[0] )
				{
					break;
				}
			}
			
			$num ++;
		}
		
		if ( $num < $numBodies )
		{
			string $empLoaderBodyPlg = $empLoader+".outBodies["+$num+"]";
			eval( $launchFunction+"( \""+$empLoaderBodyPlg+"\")");
		}
		else
			print("Didnt find the body\n");
	}
}
